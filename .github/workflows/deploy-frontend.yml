name: Deploy Frontend Simple (No S3)

on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "public/**"
      - "package.json"
      - "vite.config.js"
      - ".github/workflows/deploy-frontend.yml"
  workflow_dispatch: # 수동 실행 가능

env:
  AWS_REGION: ap-northeast-2
  NODE_VERSION: 18
  BUILD_PATH: dist

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📝 Create Production Environment File
        run: |
          cat > .env.production << EOF
          VITE_API_BASE_URL=/api
          VITE_TIMEOUT=30000
          VITE_DEBUG_MODE=false
          VITE_LOG_LEVEL=error
          VITE_ENABLE_CACHE=true
          EOF

      - name: 📦 Install dependencies
        run: |
          echo "📦 Installing npm dependencies..."
          npm ci --production=false

      - name: 🏗️ Build for production
        run: |
          echo "🏗️ Building Vue.js application..."
          npm run build

          # 빌드 검증
          if [ ! -f "${{ env.BUILD_PATH }}/index.html" ]; then
            echo "❌ Build failed: index.html not found"
            exit 1
          fi

          echo "📊 Build completed successfully:"
          ls -la ${{ env.BUILD_PATH }}/
          du -sh ${{ env.BUILD_PATH }}/

      - name: 📦 Create deployment package
        run: |
          cd ${{ env.BUILD_PATH }}
          tar -czf ../frontend-build.tar.gz .
          cd ..
          echo "✅ Package created: $(ls -lh frontend-build.tar.gz)"

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🚀 Deploy to Blue Instance
        run: |
          echo "🚀 Deploying to Blue Instance..."

          # 빌드 파일을 Base64로 인코딩해서 SSM으로 전송
          BUILD_B64=$(base64 -w 0 frontend-build.tar.gz)

          aws ssm send-command \
            --instance-ids ${{ secrets.VPC1_BLUE_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              \"echo '=== 🔄 Starting Vue.js deployment (BLUE) ==='\",
              \"echo 'Build time: $(date)'\",
              \"sudo mkdir -p /var/www/backup\",
              \"if [ -d '/var/www/html' ] && [ '\$(ls -A /var/www/html)' ]; then sudo cp -r /var/www/html /var/www/backup/backup_\$(date +%Y%m%d_%H%M%S); fi\",
              \"echo '=== 📥 Receiving build file ==='\",
              \"echo '$BUILD_B64' | base64 -d > /tmp/frontend-build.tar.gz\",
              \"ls -la /tmp/frontend-build.tar.gz\",
              \"echo '=== 🚀 Deploying files ==='\",
              \"sudo rm -rf /var/www/html/*\",
              \"sudo tar -xzf /tmp/frontend-build.tar.gz -C /var/www/html/\",
              \"sudo chown -R nginx:nginx /var/www/html\",
              \"sudo chmod -R 755 /var/www/html\",
              \"echo '=== 🔧 Reloading Nginx ==='\",
              \"sudo nginx -t && sudo systemctl reload nginx\",
              \"echo '=== ✅ Blue deployment completed! ==='\",
              \"ls -la /var/www/html/ | head -5\",
              \"curl -s localhost | head -3 || echo 'Local test failed'\",
              \"rm -f /tmp/frontend-build.tar.gz\"
            ]" \
            --output text

      - name: ⏰ Wait for Blue deployment
        run: sleep 60

      - name: 🚀 Deploy to Green Instance
        run: |
          echo "🚀 Deploying to Green Instance..."

          BUILD_B64=$(base64 -w 0 frontend-build.tar.gz)

          aws ssm send-command \
            --instance-ids ${{ secrets.VPC1_GREEN_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              \"echo '=== 🔄 Starting Vue.js deployment (GREEN) ==='\",
              \"echo 'Build time: $(date)'\",
              \"sudo mkdir -p /var/www/backup\",
              \"if [ -d '/var/www/html' ] && [ '\$(ls -A /var/www/html)' ]; then sudo cp -r /var/www/html /var/www/backup/backup_\$(date +%Y%m%d_%H%M%S); fi\",
              \"echo '=== 📥 Receiving build file ==='\",
              \"echo '$BUILD_B64' | base64 -d > /tmp/frontend-build.tar.gz\",
              \"ls -la /tmp/frontend-build.tar.gz\",
              \"echo '=== 🚀 Deploying files ==='\",
              \"sudo rm -rf /var/www/html/*\",
              \"sudo tar -xzf /tmp/frontend-build.tar.gz -C /var/www/html/\",
              \"sudo chown -R nginx:nginx /var/www/html\",
              \"sudo chmod -R 755 /var/www/html\",
              \"echo '=== 🔧 Reloading Nginx ==='\",
              \"sudo nginx -t && sudo systemctl reload nginx\",
              \"echo '=== ✅ Green deployment completed! ==='\",
              \"ls -la /var/www/html/ | head -5\",
              \"curl -s localhost | head -3 || echo 'Local test failed'\",
              \"rm -f /tmp/frontend-build.tar.gz\"
            ]" \
            --output text

      - name: ⏰ Wait for Green deployment
        run: sleep 60

      - name: 🧪 Final Health Check
        run: |
          echo "🧪 Performing final health check..."
          ALB_URL="${{ secrets.VPC1_ALB_URL }}"

          for i in {1..10}; do
            echo "🔍 Attempt $i/10..."
            if curl -f -s "$ALB_URL/" | grep -q "Vite\|Vue\|app"; then
              echo "✅ Health check passed!"
              echo "🌐 Website: $ALB_URL"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "❌ Health check failed"
              curl -s "$ALB_URL/" | head -5
              exit 1
            fi
            sleep 15
          done

      - name: 📊 Deployment Summary
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "🌐 Frontend URL: ${{ secrets.VPC1_ALB_URL }}"
          echo "⏱️ Total time: Much faster than before!"
