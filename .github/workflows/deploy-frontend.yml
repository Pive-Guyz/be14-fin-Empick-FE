name: Deploy Frontend to VPC1

on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "public/**"
      - "package*.json"
      - "vite.config.js"
      - ".github/workflows/deploy-frontend.yml"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Create production environment file
        run: |
          cat > .env.production << EOF
          VITE_API_BASE_URL=/api
          VITE_APP_TITLE=Empick
          NODE_ENV=production
          EOF

      - name: Build application
        run: npm run build

      - name: Create deployment package
        run: |
          tar -czf frontend-build.tar.gz -C dist .
          ls -la frontend-build.tar.gz

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Upload build to S3
        run: |
          # S3 버킷에 빌드 파일 업로드 (latest로 덮어쓰기)
          aws s3 cp frontend-build.tar.gz "s3://${{ secrets.S3_BUCKET_NAME }}/frontend-builds/latest.tar.gz"

          # 배포 트리거 파일 생성 (EC2가 감지할 수 있도록)
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          echo "{\"timestamp\":\"${TIMESTAMP}\",\"build_file\":\"frontend-builds/latest.tar.gz\",\"commit\":\"${{ github.sha }}\"}" > deploy-trigger.json
          aws s3 cp deploy-trigger.json "s3://${{ secrets.S3_BUCKET_NAME }}/frontend-builds/deploy-trigger.json"

          echo "📦 Build uploaded to s3://${{ secrets.S3_BUCKET_NAME }}/frontend-builds/latest.tar.gz"
          echo "🚀 Deploy trigger created: ${TIMESTAMP}"

      - name: Wait for EC2 auto-deployment
        run: |
          echo "🔄 Waiting for EC2 instances to detect and deploy new build..."
          echo "📁 Build file: s3://${{ secrets.S3_BUCKET_NAME }}/frontend-builds/latest.tar.gz"
          echo "🚀 Deploy trigger: s3://${{ secrets.S3_BUCKET_NAME }}/frontend-builds/deploy-trigger.json"

          # 1분 대기 후 반복 확인 방식으로 변경
          echo "⏳ Initial wait: 1 minute for EC2 cron detection..."
          sleep 60

          # S3 트리거 파일 변경 감지 및 배포 상태 확인
          DEPLOY_TRIGGER_KEY="frontend-builds/deploy-trigger.json"
          INITIAL_TIMESTAMP=$(date +%Y%m%d_%H%M%S)

          echo "🔍 Monitoring deployment progress..."
          for i in {1..8}; do
            echo "📊 Check attempt $i/8..."
            
            # S3에서 현재 트리거 파일 내용 확인
            if aws s3 cp "s3://${{ secrets.S3_BUCKET_NAME }}/${DEPLOY_TRIGGER_KEY}" current-trigger.json 2>/dev/null; then
              CURRENT_TIMESTAMP=$(cat current-trigger.json | grep -o '"timestamp":"[^"]*"' | cut -d'"' -f4)
              echo "📅 Current trigger timestamp: ${CURRENT_TIMESTAMP}"
              
              # ALB Health Check로 배포 완료 확인
              HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://${{ secrets.VPC1_ALB_DNS_NAME }}" || echo "000")
              echo "🏥 Health check: HTTP $HTTP_STATUS"
              
              if [ "$HTTP_STATUS" = "200" ]; then
                echo "✅ Deployment appears to be active, proceeding to verification..."
                break
              fi
            else
              echo "⚠️ Could not fetch trigger file from S3"
            fi
            
            echo "⏳ Waiting 30 seconds before next check..."
            sleep 30
          done

          echo "🎯 Auto-deployment monitoring completed"

      - name: Verify deployment
        run: |
          echo "🔍 Final deployment verification..."

          # ALB 엔드포인트 확인
          ALB_DNS="${{ secrets.VPC1_ALB_DNS_NAME }}"

          # Health check (재시도 간격 단축)
          for i in {1..6}; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://$ALB_DNS" || echo "000")
            echo "🏥 Final verification attempt $i/6: HTTP $HTTP_STATUS"
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "✅ Deployment verification successful!"
              echo "🌐 Frontend URL: http://$ALB_DNS"
              echo "🎉 Deployment completed successfully"
              exit 0
            fi
            
            if [ $i -lt 6 ]; then
              echo "⏳ Waiting 15 seconds before retry..."
              sleep 15
            fi
          done

          echo "❌ Deployment verification failed after 6 attempts"
          echo "🔧 Please check ALB and EC2 instances manually"
          echo "🌐 ALB URL: http://$ALB_DNS"
          exit 1
