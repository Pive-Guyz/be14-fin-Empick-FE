name: Deploy Frontend to VPC1

on:
  push:
    branches: [main]
    paths:
      - "empick-frontend/**"
      - ".github/workflows/deploy-frontend.yml"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        working-directory: ./
        run: npm ci

      - name: Create production environment file
        working-directory: ./
        run: |
          cat > .env.production << EOF
          VITE_API_BASE_URL=/api
          VITE_APP_TITLE=Empick
          NODE_ENV=production
          EOF

      - name: Build application
        working-directory: ./
        run: npm run build

      - name: Create deployment package
        working-directory: ./
        run: |
          tar -czf frontend-build.tar.gz -C dist .
          ls -la frontend-build.tar.gz

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Upload build to S3
        run: |
          # S3 Î≤ÑÌÇ∑Ïóê ÎπåÎìú ÌååÏùº ÏóÖÎ°úÎìú
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          S3_KEY="frontend-builds/frontend-build-${TIMESTAMP}.tar.gz"

          aws s3 cp frontend-build.tar.gz "s3://${{ secrets.S3_BUCKET_NAME }}/${S3_KEY}"

          # S3 ÌÇ§Î•º ÌôòÍ≤Ω ÌååÏùºÏóê Ï†ÄÏû• (Îã§Ïùå Ïä§ÌÖùÏóêÏÑú ÏÇ¨Ïö©)
          echo "S3_BUILD_KEY=${S3_KEY}" >> $GITHUB_ENV
          echo "üì¶ Build uploaded to s3://${{ secrets.S3_BUCKET_NAME }}/${S3_KEY}"

      - name: Deploy to Blue Instance
        run: |
          INSTANCE_ID="${{ secrets.VPC1_BLUE_INSTANCE_ID }}"
          echo "üîµ Deploying to Blue Instance: $INSTANCE_ID"

          # Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉÅÌÉú ÌôïÏù∏
          aws ssm describe-instance-information --filters "Key=InstanceIds,Values=$INSTANCE_ID" --query 'InstanceInformationList[0].PingStatus' --output text

          # S3ÏóêÏÑú ÎπåÎìú ÌååÏùº Îã§Ïö¥Î°úÎìúÌïòÏó¨ Î∞∞Ìè¨
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              \"echo 'üîµ Starting Blue Instance deployment...'\",
              \"cd /tmp\",
              \"aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/${S3_BUILD_KEY} frontend-build.tar.gz\",
              \"ls -la frontend-build.tar.gz\",
              \"sudo rm -rf /tmp/vue-build\",
              \"sudo mkdir -p /tmp/vue-build\",
              \"sudo tar -xzf frontend-build.tar.gz -C /tmp/vue-build\",
              \"sudo chown -R nginx:nginx /tmp/vue-build\",
              \"sudo /home/ec2-user/deploy.sh\",
              \"echo '‚úÖ Blue Instance deployment completed'\"
            ]" \
            --timeout-seconds 1800 \
            --output text --query 'Command.CommandId' > blue_command_id.txt
            
          # Î™ÖÎ†π Ïã§Ìñâ Í≤∞Í≥º ÎåÄÍ∏∞ Î∞è ÌôïÏù∏
          COMMAND_ID=$(cat blue_command_id.txt)
          echo "Blue Command ID: $COMMAND_ID"

          # Î™ÖÎ†π ÏôÑÎ£å ÎåÄÍ∏∞ (ÏµúÎåÄ 30Î∂Ñ)
          for i in {1..60}; do
            STATUS=$(aws ssm get-command-invocation --command-id "$COMMAND_ID" --instance-id "$INSTANCE_ID" --query 'Status' --output text 2>/dev/null || echo "InProgress")
            echo "Blue deployment status: $STATUS (attempt $i/60)"
            
            if [ "$STATUS" = "Success" ]; then
              echo "‚úÖ Blue deployment completed successfully"
              aws ssm get-command-invocation --command-id "$COMMAND_ID" --instance-id "$INSTANCE_ID" --query 'StandardOutputContent' --output text
              break
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ] || [ "$STATUS" = "TimedOut" ]; then
              echo "‚ùå Blue deployment failed with status: $STATUS"
              aws ssm get-command-invocation --command-id "$COMMAND_ID" --instance-id "$INSTANCE_ID" --query 'StandardErrorContent' --output text
              exit 1
            fi
            
            sleep 30
          done

      - name: Deploy to Green Instance
        run: |
          INSTANCE_ID="${{ secrets.VPC1_GREEN_INSTANCE_ID }}"
          echo "üü¢ Deploying to Green Instance: $INSTANCE_ID"

          # Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉÅÌÉú ÌôïÏù∏
          aws ssm describe-instance-information --filters "Key=InstanceIds,Values=$INSTANCE_ID" --query 'InstanceInformationList[0].PingStatus' --output text

          # S3ÏóêÏÑú ÎπåÎìú ÌååÏùº Îã§Ïö¥Î°úÎìúÌïòÏó¨ Î∞∞Ìè¨
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              \"echo 'üü¢ Starting Green Instance deployment...'\",
              \"cd /tmp\",
              \"aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/${S3_BUILD_KEY} frontend-build.tar.gz\",
              \"ls -la frontend-build.tar.gz\",
              \"sudo rm -rf /tmp/vue-build\",
              \"sudo mkdir -p /tmp/vue-build\",
              \"sudo tar -xzf frontend-build.tar.gz -C /tmp/vue-build\",
              \"sudo chown -R nginx:nginx /tmp/vue-build\",
              \"sudo /home/ec2-user/deploy.sh\",
              \"echo '‚úÖ Green Instance deployment completed'\"
            ]" \
            --timeout-seconds 1800 \
            --output text --query 'Command.CommandId' > green_command_id.txt
            
          # Î™ÖÎ†π Ïã§Ìñâ Í≤∞Í≥º ÎåÄÍ∏∞ Î∞è ÌôïÏù∏
          COMMAND_ID=$(cat green_command_id.txt)
          echo "Green Command ID: $COMMAND_ID"

          # Î™ÖÎ†π ÏôÑÎ£å ÎåÄÍ∏∞ (ÏµúÎåÄ 30Î∂Ñ)
          for i in {1..60}; do
            STATUS=$(aws ssm get-command-invocation --command-id "$COMMAND_ID" --instance-id "$INSTANCE_ID" --query 'Status' --output text 2>/dev/null || echo "InProgress")
            echo "Green deployment status: $STATUS (attempt $i/60)"
            
            if [ "$STATUS" = "Success" ]; then
              echo "‚úÖ Green deployment completed successfully"
              aws ssm get-command-invocation --command-id "$COMMAND_ID" --instance-id "$INSTANCE_ID" --query 'StandardOutputContent' --output text
              break
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ] || [ "$STATUS" = "TimedOut" ]; then
              echo "‚ùå Green deployment failed with status: $STATUS"
              aws ssm get-command-invocation --command-id "$COMMAND_ID" --instance-id "$INSTANCE_ID" --query 'StandardErrorContent' --output text
              exit 1
            fi
            
            sleep 30
          done

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."

          # ALB ÏóîÎìúÌè¨Ïù∏Ìä∏ ÌôïÏù∏
          ALB_DNS="${{ secrets.VPC1_ALB_DNS_NAME }}"

          # Health check
          for i in {1..10}; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://$ALB_DNS" || echo "000")
            echo "Health check attempt $i/10: HTTP $HTTP_STATUS"
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "‚úÖ Deployment verification successful"
              exit 0
            fi
            
            sleep 10
          done

          echo "‚ö†Ô∏è Deployment verification failed - check ALB and instances"
          exit 1
