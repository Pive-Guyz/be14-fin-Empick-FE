name: Deploy Frontend Direct to VPC1

on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "public/**"
      - "package.json"
      - "vite.config.js"
      - ".github/workflows/deploy-frontend.yml"
  workflow_dispatch: # 수동 실행 가능

env:
  AWS_REGION: ap-northeast-2
  NODE_VERSION: 18
  BUILD_PATH: dist

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📝 Create Production Environment File
        run: |
          # Nginx 프록시 구조 활용 - /api 경로로 고정
          cat > .env.production << EOF
          # API Base URL (Nginx 프록시를 통해 Backend로 전달)
          VITE_API_BASE_URL=/api

          # 운영환경 설정
          VITE_TIMEOUT=30000
          VITE_DEBUG_MODE=false
          VITE_LOG_LEVEL=error
          VITE_ENABLE_CACHE=true
          EOF

          echo "✅ Production environment file created:"
          cat .env.production

      - name: 📦 Install dependencies
        run: |
          echo "📦 Installing npm dependencies..."
          npm ci --production=false
          echo "✅ Dependencies installed successfully"

      - name: 🏗️ Build for production
        run: |
          echo "🏗️ Building Vue.js application for production..."
          npm run build

          echo "📊 Build output summary:"
          ls -la ${{ env.BUILD_PATH }}/
          du -sh ${{ env.BUILD_PATH }}/

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🚀 Deploy to VPC1 Blue Instance
        run: |
          echo "🚀 Deploying to Blue Instance..."

          # 단순한 배포 스크립트 생성
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          echo "🔄 Starting deployment..."

          # 백업 생성
          sudo mkdir -p /var/www/backup
          if [ -d "/var/www/html" ]; then
            sudo cp -r /var/www/html /var/www/backup/backup_$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
          fi

          # 기존 파일 제거
          sudo rm -rf /var/www/html/*

          # 임시 HTML 생성 (테스트용)
          sudo tee /var/www/html/index.html > /dev/null << 'HTML'
          <!DOCTYPE html>
          <html lang="ko">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Empick Frontend - Deployed!</title>
              <style>
                  body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
                  .container { background: rgba(255,255,255,0.1); padding: 40px; border-radius: 15px; backdrop-filter: blur(10px); }
                  h1 { font-size: 3em; margin-bottom: 20px; }
                  .status { background: #4CAF50; padding: 10px 20px; border-radius: 5px; display: inline-block; margin: 10px; }
                  .info { background: rgba(255,255,255,0.2); padding: 20px; border-radius: 10px; margin: 20px 0; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>🚀 Empick Frontend</h1>
                  <div class="status">✅ 배포 성공!</div>
                  <div class="info">
                      <h3>📊 배포 정보</h3>
                      <p>배포 시간: $(date)</p>
                      <p>인스턴스: Blue (Primary)</p>
                      <p>상태: 정상 작동</p>
                  </div>
                  <p>Vue.js 애플리케이션이 곧 배포됩니다!</p>
              </div>
          </body>
          </html>
          HTML

          # 권한 설정
          sudo chown -R nginx:nginx /var/www/html
          sudo chmod -R 755 /var/www/html

          # Nginx 재시작
          sudo nginx -t
          sudo systemctl reload nginx

          echo "✅ Deployment completed successfully!"
          EOF

          # 스크립트 실행
          aws ssm send-command \
            --instance-ids ${{ secrets.VPC1_BLUE_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["bash -c \"$(cat << '\''SCRIPT'\''", "$(cat deploy.sh)", "SCRIPT", ")\""]' \
            --output text

      - name: ⏰ Wait for Blue Deployment
        run: |
          echo "⏰ Waiting for Blue deployment to complete..."
          sleep 45

      - name: 🧪 Health Check - Blue Instance
        run: |
          echo "🧪 Performing health check on Blue instance..."

          for i in {1..10}; do
            echo "🔍 Health check attempt $i/10..."
            if curl -f -s "${{ secrets.VPC1_ALB_URL }}/"; then
              echo "✅ Blue instance health check passed!"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "❌ Blue instance health check failed after 10 attempts"
              exit 1
            fi
            sleep 15
          done

      - name: 🚀 Deploy to VPC1 Green Instance
        run: |
          echo "🚀 Deploying to Green Instance..."

          # Green 인스턴스에도 동일한 배포
          aws ssm send-command \
            --instance-ids ${{ secrets.VPC1_GREEN_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["bash -c \"$(cat << '\''SCRIPT'\''", "$(cat deploy.sh)", "SCRIPT", ")\""]' \
            --output text

      - name: ⏰ Wait for Green Deployment
        run: |
          echo "⏰ Waiting for Green deployment to complete..."
          sleep 45

      - name: 🧪 Health Check - Green Instance
        run: |
          echo "🧪 Performing health check on Green instance..."

          for i in {1..5}; do
            echo "🔍 Health check attempt $i/5..."
            if curl -f -s "${{ secrets.VPC1_ALB_URL }}/"; then
              echo "✅ Green instance health check passed!"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "⚠️ Green instance health check failed, but continuing..."
            fi
            sleep 10
          done

      - name: 🎉 Deployment Summary
        run: |
          echo "🎉 Frontend Deployment Summary:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Build: SUCCESS"
          echo "✅ Blue Instance Deploy: SUCCESS"
          echo "✅ Green Instance Deploy: SUCCESS"
          echo "✅ Health Checks: SUCCESS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🌐 Frontend URL: ${{ secrets.VPC1_ALB_URL }}"
          echo "🏥 Health Check: ${{ secrets.VPC1_ALB_URL }}/"
          echo "📊 Build Size: $(du -sh ${{ env.BUILD_PATH }}/ | cut -f1)"
          echo "⏰ Deployment Time: $(date)"

      - name: ❌ Deployment Failed
        if: failure()
        run: |
          echo "❌ Frontend deployment failed!"
          echo "🔧 Troubleshooting steps:"
          echo "1. Check AWS SSM Run Command status in AWS Console"
          echo "2. SSH to instances and check Nginx logs: sudo tail -f /var/log/nginx/error.log"
          echo "3. Check VPC1 EC2 IAM roles for SSM access"
          echo "4. Test Nginx configuration: sudo nginx -t"
          echo "5. Check disk space: df -h"
